# 配置该程序的端口号
server.port=8080
#应用程序的名字

spring.application.name=spring-mvc-demo

# 配置的理解##############################
# 给加了@ConfigurationProperties(prefix = "hello")的对象设置属性值
hello.NAME=liufenghaha
# 设置20到100之间的随机数
hello.age=${random.int[20,100]}
# 给这个对象上的一个map设置值，hllo.map.age=112表示这个对象有个field叫map，key age对应的值为112
hello.map.age=112
hello.map.name=liudehua
hello.map.person=zhangxueyou
hello.map.haha=niubi

# 日志配置##############################
# 配置日志输出地址，当logging.file.name和logging.file.path这两个都没有配置的时候，日志只会输出到控制台
# 设置日志的文件的名称(他可以是一个地址如：/spring/log/spring.log)，设置了这个属性后logging.file.path就失效了
logging.file.name=log/${spring.application.name}.log
# 设置日志文件的位置
logging.file.path=./var/
# 设置日志输出级别，这里表示输出debug及以上的日志
# 所有的日志系统都有TRACE, DEBUG, INFO, WARN, ERROR, FATAL,OFF这几个级别，spring的root logger默认输出INFO及以上的
logging.level.root=info
# 表示保留过去多少天的日志
logging.file.max-history=7
# 表示存储的整个日志的大小上限，超过该上限则前面的日志会被清理(即使在history期限内)，不一定是刚超过500才开始清理
logging.file.total-size-cap=500KB
# 单个日志文件的大小，默认10M，单个文件超过这个值后就新建日志文件记录日志。
logging.file.max-size=10KB
# 设置应用程序启动的时候清除之前所有的日志，默认false，（待验证，通过启动工程的方式并没有进行清理）
logging.file.clean-history-on-start=true

# 静态资源##############################
# 注意！！如果设置了配置类继成WebMvcConfigurationSupport，则下面的设置都会失效，并且默认值也会失效
# 这个用来设置静态资源的请求路径，如http:xxx/resources/xxx的请求则通过ResourceHandler来处理，到静态资源目录下寻找对应的静态资源文
# 并返回
spring.mvc.static-path-pattern=/resources/**
# 设置静态资源目录的地址，比如设置的是spring.resources.static-locations=/static，那么结合上面的spring.mvc.static-path-pattern=/resources/**，
# 则请求http:xxxx/resources/image/person/spring.png到/static/image/person/spring.png找图片
# 默认为{ "classpath:/META-INF/resources/","classpath:/resources/", "classpath:/static/", "classpath:/public/" }
spring.resources.static-locations[0]=classpath:/static/

# 数据库##############################
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/spring
spring.datasource.username=root
spring.datasource.password=lf123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# none: The default for MySQL. No change is made to the database structure.
# update: Hibernate changes the database according to the given entity structures.
# create: Creates the database every time but does not drop it on close.
# create-drop: Creates the database and drops it when SessionFactory closes.
spring.jpa.hibernate.ddl-auto=update